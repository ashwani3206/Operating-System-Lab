#include <stdio.h>

// Structure to represent a process
struct Process {
    int pid;            // Process ID
    int arrival_time;   // Arrival time
    int burst_time;     // Burst time
};

// Function to perform Shortest Job First scheduling
void sjf_scheduling(struct Process processes[], int n) {
    int total_time = 0;
    int waiting_time[n], turnaround_time[n];

    // Calculate waiting time for each process
    waiting_time[0] = 0;
    for (int i = 1; i < n; i++) {
        int shortest_job_index = i;
        for (int j = 0; j < i; j++) {
            if (processes[j].burst_time < processes[shortest_job_index].burst_time) {
                shortest_job_index = j;
            }
        }
        // Swap the processes
        struct Process temp = processes[i];
        processes[i] = processes[shortest_job_index];
        processes[shortest_job_index] = temp;

        // Calculate waiting time for the current process
        waiting_time[i] = total_time - processes[i].arrival_time;
        if (waiting_time[i] < 0) {
            waiting_time[i] = 0;
        }

        // Update total time
        total_time += processes[i].burst_time;
    }

    // Calculate turnaround time for each process
    for (int i = 0; i < n; i++) {
        turnaround_time[i] = processes[i].burst_time + waiting_time[i];
    }

    // Print the results
    printf("Process\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].arrival_time,
               processes[i].burst_time, waiting_time[i], turnaround_time[i]);
    }
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    // Input process details
    for (int i = 0; i < n; i++) {
        printf("Enter arrival time for process %d: ", i + 1);
        scanf("%d", &processes[i].arrival_time);
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
        processes[i].pid = i + 1;
    }

    // Perform SJF scheduling
    sjf_scheduling(processes, n);

    return 0;
}
